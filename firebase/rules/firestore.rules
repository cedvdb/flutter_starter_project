rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {


    function authenticated() {
      return request.auth != null;
    }

    function onlyUpdated(properties) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(properties);
    }

    function getRole(restaurantId) {
      let userId = request.auth.uid;
      return get(/databases/$(database)/documents/roles/$(userId + ':' + restaurantId)).data;
    }

    function isOwner(restaurantId) {
      let userRole = getRole(restaurantId);
      return userRole != null && userRole.role == 'owner';
    }

    function isManager(restaurantId) {
      let userRole = getRole(restaurantId);
      return userRole != null && (userRole.role == 'owner' || userRole.role == 'manager' );
    }

    function isEmployee(restaurantId) {
      let userRole = getRole(restaurantId);
      return userRole != null && (userRole == 'employee' || userRole == 'manager' || userRole == 'owner');
    }

    match /roles/{role} {
      allow list: if authenticated() && (resource.data.user == request.auth.uid || isManager(resource.data.restaurant));
      allow write: if authenticated() && isOwner(resource.data.restaurant);
    }

    match /restaurants/{restaurantId} {
      allow get: if true;
      allow list: if isEmployee(resource.id);
      allow create: if authenticated() && request.resource.data.createdBy == request.auth.uid;
      allow update: if authenticated() && isManager(resource.id);
    }

    match /analytics/{analytic} {
      allow get: if isEmployee(resource.data.restaurant);
    }

    match /menus/{menu} {
      allow get: if true;
      allow write: if isManager(resource.data.restaurant);
    }

    match /users/{userId} {
      allow read, write: if authenticated() && request.auth.uid == userId;
    }

    match /orders/{order} {
      allow get: if true;
      allow list: if authenticated() && isEmployee(resource.data.restaurant);
      allow create: if true;
      allow update: if authenticated() && isEmployee(resource.data.restaurant) && onlyUpdated(["status"]);
    }

    match /visits/{visit} {
      allow create: if true;
      allow read: if authenticated() && isEmployee(resource.data.restaurant);
    }

    match /visits-counter/{counter} {
      allow get: if isEmployee(resource.data.restaurant);
    }

    match /invitations/{invitation} {
      allow get: if true;
      allow create: if isManager(request.resource.data.restaurant);
      allow update: if onlyUpdated(["status", "userId"]);
    }

  }
}